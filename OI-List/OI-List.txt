Answering Business Questions with SQL
Be amazed by the power of your queries!
Lucas Morato
Lucas Morato

Feb 26, 2020·5 min read

Deixe o SQL abrir suas gavetas de dados! Fonte
A maioria dos trabalhos relacionados à ciência de dados exige que você tenha fortes habilidades em SQL, e isso faz sentido, pois uma das tarefas mais básicas que você terá é manipular dados com precisão. Usamos SQL para muitos propósitos, incluindo análise exploratória de dados, para criar um conjunto de dados filtrado de nossos dados, ou mesmo para encontrar insights sobre o próprio negócio.

Muitos dos cursos de SQL darão a você uma visão geral de como projetar consultas básicas, mas não é comum que você tenha a chance de praticar a redação de consultas com base em questões reais, usando várias tabelas e reproduzindo o que normalmente fazemos como analistas de dados, então meu objetivo neste tutorial é mostrar como fazer isso usando funções SQL populares como:

CASE WHEN;
SUB-QUERY;
WINDOW FUNCTIONS;
TEMPORARY TABLES.

Antes de começarmos, você pode encontrar os conjuntos de dados aqui, e o arquivo SQL para acompanhar o tutorial está aqui.
Compreender os dados
O primeiro passo é ter um bom entendimento dos tipos de dados que temos em mãos. Por hoje, usaremos dados de transações de uma loja online brasileira. Vamos dar uma olhada em como o banco de dados é organizado:

Esquema de banco de dados. Fonte
Existem 8 tabelas, todas conectadas por pelo menos um campo. Os dados abrangem cerca de 100 mil transações, entre informações sobre clientes, pagamentos, produtos e encomendas. Há espaço para muitas possibilidades, mas vamos nos concentrar nas questões relacionadas ao valor das vendas. Vamos imaginar que seu gerente lhe fez três perguntas:

Quem são os principais compradores em cada estado e quanto eles gastaram?
Qual é a despesa média para pessoas que deixaram um comentário negativo? Que tal críticas positivas?
Quanto, em porcentagem, as vendas aumentaram ou diminuíram ao longo dos meses de 2017?

Para responder a essas perguntas, estou usando o SQL Server, um dos sistemas de gerenciamento de SQL mais populares. Existem muitas outras variantes disponíveis, como PostgreSQL, SQLite e MySQL. A sintaxe pode mudar um pouco, mas os conceitos principais permanecem os mesmos nas diferentes linguagens.
Para usar como referência, abaixo você encontra a primeira linha das quatro tabelas que vamos usar hoje. Reserve um momento para verificar o campo e como as tabelas estão conectadas.

Primeira linha de tabelas de clientes, pedidos e itens de pedidos.

Quais são os principais compradores em cada estado?
Para esta consulta, precisamos selecionar o cliente com o maior total de compras em cada estado. Os dados de que precisamos estão nas tabelas de clientes e itens de pedido, e precisamos usar pedidos como um conector. A abordagem que usamos neste caso é gerar uma subconsulta dentro de uma função de janela para agregar o resultado por Estado e selecionar apenas a linha com o preço máximo.

SELECT	customer, state, total_amount
 FROM (
	SELECT	
		c.customer_id AS customer,
		c.customer_state AS state,
		SUM(oi.price) AS total_amount,

		-- The line below creates the rank of top amount grouped by state
		-- A linha abaixo cria a classificação do valor superior agrupado por estado
		ROW_NUMBER() OVER (PARTITION BY c.customer_state
			ORDER BY SUM(oi.price) DESC) AS row_order

	FROM customers AS c
	INNER JOIN orders AS o
		ON c.customer_id = o.customer_id
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
	GROUP BY c.customer_state, c.customer_id) AS sq

-- The Where statement makes sure we are selecting just the top buyer
-- A declaração Where garante que estamos selecionando apenas o principal comprador
WHERE row_order = 1 
ORDER BY total_amount DESC;

A consulta retorna o principal comprador de cada um dos 27 estados brasileiros, abaixo você pode verificar as primeiras cinco linhas:

Principal comprador por estado, primeiras 5 linhas. Fonte
Despesa média por sentimento
A análise de sentimento é um dos tópicos da moda na ciência de dados, portanto, pode ser necessário classificá-la para realizar a análise. Temos uma coluna com a pontuação da revisão, com um intervalo de 1 a 5. Para este exemplo, vamos supor que as revisões com uma pontuação igual a 4 ou 5 são positivas e que todo o resto é negativo. A seguir, calcularemos a média de cada grupo e, para isso, precisaremos usar três tabelas: order_reviews, order_items e orders (novamente como um conector). Usaremos aqui uma expressão de tabela comum (CTE), ela atua como uma tabela temporária a partir da qual podemos usar os campos calculados para consultar, já que não podemos usar a função média diretamente.

- Questão 2: preço médio por sentimento
- A expressão de tabela comum agirá como uma tabela temporária
WITH cte AS (
		SELECT	oi.price AS order_price,

		-- CASE WHEN irá classificar a pontuação de acordo com os critérios
        -- nós definimos
		CASE WHEN review_score > 3 THEN 'positive'
		ELSE 'negative' END AS sentiment
	FROM orders AS o
	INNER JOIN order_items AS oi
		ON o.order_id = oi.order_id
	INNER JOIN order_reviews AS r
		ON o.order_id = r.order_id
	)

-- Agora só precisamos selecionar o preço médio e agrupar pelo sentimento
SELECT ROUND(AVG(order_price), 2) as avg_price, 
	sentiment
FROM cte 
GROUP BY sentiment;

O resultado que obtivemos mostra que o preço não diferia muito entre os dois sentimentos. Interessante, não é?

Resultado da consulta. Pessoas felizes estão a apenas 0,61 centavos de distância de pessoas negativas. Fonte
Vendas ao longo dos meses em 2017
Para a última consulta, precisamos da tabela orders e order_items. O desafio é obter o total de vendas dos meses anteriores e comparar a diferença com o mês real. As etapas de que precisamos são:
Crie um CTE;
Use LAG () para criar uma coluna com as vendas do mês anterior;
Na consulta externa, execute o cálculo, usando FORMAT () para obter os resultados apresentados de uma maneira agradável

-- Pergunta 3: Desempenho de vendas ao longo dos meses de 2017
WITH cte AS (
SELECT 
	MONTH(order_purchase_timestamp) AS month_,

	-- Mês real
	ROUND(
		SUM(oi.price), 2) AS month_sales,
	
	-- Mês anterior
	ROUND(
		LAG(SUM(oi.price), 1) OVER(ORDER BY MONTH(order_purchase_timestamp)), 
		2) AS previous_month
FROM orders AS o
INNER JOIN order_items AS oi
	ON o.order_id = oi.order_id
WHERE YEAR(order_purchase_timestamp) = 2017
GROUP BY MONTH(order_purchase_timestamp)
)
SELECT
	month_,
	month_sales,
	previous_month,

	-- O formato 'P' fornece os números com o sinal "%", arredondados para 2 casas decimais
	FORMAT((month_sales - previous_month)  / previous_month, 'P') vs_previous_month 
FROM cte;

E o resultado parece muito fácil de entender. Aqui você pode visualizar o quão voláteis foram as vendas durante 2017:

Grande aumento nas vendas em fevereiro e novembro, essas informações podem ser usadas para planejar os níveis de estoque e até mesmo para prever receitas futuras. Fonte
E é isso por hoje! Neste tutorial, você viu como apenas 3 perguntas simples podem exigir uma variedade de funções que o SQL oferece a você. O design de consulta é um tópico incrível para explorar, onde muitas variantes podem ter uma forte influência, por isso é sempre um bom assunto para estudar.
Você faria essas consultas de maneira diferente? Estamos todos aqui para aprender, então fique à vontade para deixar seus comentários ou perguntas alternativas nos comentários. Espero que tenham gostado desse texto!